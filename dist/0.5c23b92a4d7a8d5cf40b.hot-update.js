webpackHotUpdate(0,{

/***/ 364:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(81), RootInstanceProvider = __webpack_require__(89), ReactMount = __webpack_require__(91), React = __webpack_require__(159); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {\n\n\"use strict\";\n\nvar __extends = undefined && undefined.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar React = __webpack_require__(159);\nvar ReactDOM = __webpack_require__(175);\nvar classNames = __webpack_require__(346);\nvar Selectable_1 = __webpack_require__(352);\nvar SlideIn_1 = __webpack_require__(365);\n__webpack_require__(368);\nvar Input = function (_super) {\n    __extends(Input, _super);\n    function Input(props) {\n        _super.call(this, props);\n        this.state = {\n            checked: false,\n            inputValue: props.value && props.value !== '' ? props.value : '',\n            mouseOut: false\n        };\n    }\n    Input.prototype.componentDidMount = function () {\n        var props = this.props;\n        if (props.focusOnMount) {\n            this.focusOnMount();\n        }\n    };\n    Input.prototype.componentWillUnmount = function () {\n        var inputDOM = ReactDOM.findDOMNode(this.refs['refInput']);\n        inputDOM.blur();\n    };\n    Input.prototype.focusOnMount = function () {\n        var self = this;\n        var inputDOM = ReactDOM.findDOMNode(this.refs['refInput']);\n        var focusDelay;\n        focusDelay = self.props.focusDelay || 400;\n        (function (inputDOM) {\n            setTimeout(function () {\n                inputDOM.focus();\n            }, focusDelay);\n        })(inputDOM);\n    };\n    Input.prototype.focus = function (e) {\n        var self = this;\n        this.setState({\n            checked: self.props.advanced ? true : false,\n            inputValue: e.target.value\n        });\n    };\n    Input.prototype.blur = function () {\n        var inputDOM = this.refs['refInput'];\n        this.setState({\n            checked: ReactDOM.findDOMNode(inputDOM).value !== '' ? true : false\n        });\n    };\n    Input.prototype.mouseOut = function () {\n        var inputDOM = this.refs['refInput'];\n        this.setState({\n            mouseOut: ReactDOM.findDOMNode(inputDOM).onmouseout ? false : true\n        });\n    };\n    Input.prototype.onChange = function (value) {\n        if (this.props.onChange) {\n            this.props.onChange(value.target.value);\n        } else {\n            return null;\n        }\n    };\n    Input.prototype.limit = function (max) {\n        var inputDOM = ReactDOM.findDOMNode(this.refs['refInput']);\n        var maxLength = max - 1;\n        if (inputDOM.value.length > maxLength) {\n            inputDOM.value = inputDOM.value.substr(0, maxLength);\n        }\n    };\n    Input.prototype.render = function () {\n        var self = this;\n        var props = self.props;\n        var state = self.state;\n        var inputPartial, iconPartial, pencilPartial, textAreaScrollHeight, errorInlinePartialTop, errorInlinePartialBottom;\n        var errorInlinePartial = function errorInlinePartial() {\n            if (props.errorInline && (props.errorDirection === 'top' || 'bottom')) {\n                return React.createElement(SlideIn_1.default, { from: props.errorDirection, if: !state.mouseOut && props.error, className: \"p5 h90 r-Layer light w100 error-pane h30px \" }, React.createElement(\"div\", { className: \"error-message\" }, props.errorMessage));\n            } else {\n                return null;\n            }\n        };\n        if (props.icon) {\n            iconPartial = React.createElement(\"small\", null, React.createElement(\"i\", { className: 'fa fa-' + props.icon }), \" \");\n        } else {\n            iconPartial = null;\n        }\n        var inputDOM = this.refs['refInput'];\n        if (inputDOM) {\n            if (props.autoExpand) {\n                textAreaScrollHeight = Math.min(self.props.scrollHeight, 300) + 'px';\n            } else {\n                textAreaScrollHeight = null;\n            }\n            if (!props.placeholder && !state.inputValue) {\n                pencilPartial = React.createElement(\"i\", { className: \"fa fa-pencil writing\" });\n            } else {\n                pencilPartial = null;\n            }\n        }\n        if (!props.errorInline && props.error) {\n            if (props.errorDirection === 'top') {\n                errorInlinePartialTop = React.createElement(\"div\", { className: \"p5 border-bottom\" }, React.createElement(\"small\", { className: \"error-message\" }, props.errorMessage));\n                errorInlinePartialBottom = null;\n            } else {\n                errorInlinePartialBottom = React.createElement(\"div\", { className: \"p5\" }, React.createElement(\"small\", { className: \"error-message\" }, props.errorMessage));\n                errorInlinePartialTop = null;\n            }\n        } else {\n            errorInlinePartialTop = null;\n            errorInlinePartialBottom = null;\n        }\n        switch (props.type) {\n            case 'password':\n                inputPartial = React.createElement(\"input\", { onKeyDown: self.limit.bind(self, props.maxLength), value: props.value, defaultValue: props.defaultValue, ref: 'refInput', onInput: this.focus.bind(this), onChange: this.onChange.bind(this), onBlur: this.blur.bind(this), onFocus: this.focus.bind(this), placeholder: !props.advanced ? props.title ? props.title : props.placeholder : props.placeholder, type: 'password' });\n                break;\n            case 'text':\n                inputPartial = React.createElement(\"input\", { onKeyDown: self.limit.bind(self, props.maxLength), value: props.value, defaultValue: props.defaultValue, ref: 'refInput', onInput: this.focus.bind(this), onChange: this.onChange.bind(this), onBlur: this.blur.bind(this), onFocus: this.focus.bind(this), placeholder: !props.advanced ? props.title ? props.title : props.placeholder : props.placeholder, type: 'text' });\n                break;\n            case 'number':\n                inputPartial = React.createElement(\"input\", { onKeyDown: self.limit.bind(self, props.maxLength), max: props.max, min: props.min, maxLength: props.maxLength, value: props.value, defaultValue: props.defaultValue, ref: 'refInput', onInput: this.focus.bind(this), onChange: this.onChange.bind(this), onBlur: this.blur.bind(this), onFocus: this.focus.bind(this), placeholder: !props.advanced ? props.title ? props.title : props.placeholder : props.placeholder, type: 'number' });\n                break;\n            case 'textarea':\n                inputPartial = React.createElement(\"textarea\", { rows: props.rows, cols: props.cols, ref: \"refInput\", style: { height: textAreaScrollHeight }, onFocus: this.focus.bind(this), onBlur: this.blur.bind(this), onChange: this.focus.bind(this) });\n                break;\n            default:\n        }\n        var inputWrapperClass = classNames('r-Input', { 'w100': props.block }, { 'checked': this.state.checked }, props.size, props.className);\n        var inputClass = classNames('r-Input__container', 'flohide', { 'no-title': !props.title }, { 'pt10': props.type === 'textarea' });\n        var inputClassadvanced = classNames('r-Input', props.size, { 'w100': props.block }, { 'checked': this.state.checked }, 'r-Input__container', 'flohide', 'no-title', 'e-advanced', props.className);\n        if (!props.advanced) {\n            return React.createElement(\"div\", { className: inputClassadvanced }, inputPartial);\n        } else {\n            return React.createElement(\"div\", { onMouseEnter: self.mouseOut.bind(self), onMouseLeave: self.mouseOut.bind(self), className: inputWrapperClass, style: props.style }, errorInlinePartialTop, React.createElement(\"div\", { className: inputClass }, iconPartial, React.createElement(\"small\", null, props.title), inputPartial, pencilPartial, React.createElement(Selectable_1.default, { type: props.error ? 'error' : 'primary', ghost: props.ghost, checked: self.state.checked }), errorInlinePartial()), errorInlinePartialBottom);\n        }\n    };\n    Input.defaultProps = {\n        advanced: false,\n        type: 'text'\n    };\n    return Input;\n}(React.Component);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Input;\n\n/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(262); if (makeExportsHot(module, __webpack_require__(159))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error(\"Cannot not apply hot update to \" + \"Input.tsx\" + \": \" + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))\n\n/*****************\n ** WEBPACK FOOTER\n ** ./recoil/src/components/Input/Input.tsx\n ** module id = 364\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./recoil/src/components/Input/Input.tsx?");

/***/ }

})